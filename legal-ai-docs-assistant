<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Legal Document Analysis Assistant</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f8fafc; /* Lighter gray background */
        }
        .prose {
            max-width: 100%;
        }
        .prose p { margin-bottom: 1em; }
        .clause-card {
            background-color: #ffffff;
            border: 1px solid #e2e8f0;
            border-left: 4px solid #3b82f6; /* Blue accent line */
            padding: 1rem;
            margin-bottom: 1rem;
            border-radius: 8px;
            box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
        }
        .clause-source {
            font-size: 0.875rem;
            font-weight: 600;
            color: #4b5563;
            margin-bottom: 0.5rem;
            display: block;
        }
        .clause-content {
            font-family: 'Georgia', serif; /* A more traditional font for legal text */
            color: #1f2937;
            white-space: pre-wrap; /* Preserve formatting and line breaks */
        }
        .loader {
            width: 18px;
            height: 18px;
            border: 2px solid #FFF;
            border-bottom-color: transparent;
            border-radius: 50%;
            display: inline-block;
            box-sizing: border-box;
            animation: rotation 1s linear infinite;
        }
        @keyframes rotation {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .suggestion-item {
            cursor: pointer;
            transition: background-color 0.2s;
        }
        .suggestion-item:hover {
            background-color: #eff6ff;
        }
        .term-card {
            background: #f9fafb; 
            border: 1px solid #e5e7eb;
            border-radius: 8px; 
            padding: 1rem;
        }
    </style>
</head>
<body class="text-gray-900">

    <div class="container mx-auto p-4 md:p-8 max-w-5xl">
        <header class="text-center mb-8">
            <h1 class="text-4xl font-bold text-gray-900 tracking-tight">Legal Document Analysis Assistant</h1>
            <p class="mt-2 text-lg text-gray-600">Upload contracts, case files, or statutes to find and extract relevant clauses and information.</p>
        </header>

        <main class="bg-white p-6 md:p-8 rounded-2xl shadow-lg border border-gray-200">

            <!-- Step 1: Upload Documents -->
            <div class="mb-6">
                <h2 class="text-xl font-semibold mb-3 text-gray-800">1. Upload Documents</h2>
                <div id="file-upload-area" class="flex items-center justify-center w-full">
                    <label for="file-upload" class="flex flex-col items-center justify-center w-full h-48 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 hover:bg-gray-100 transition-colors">
                        <div class="flex flex-col items-center justify-center pt-5 pb-6">
                            <svg class="w-8 h-8 mb-4 text-gray-500" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 16"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 13h3a3 3 0 0 0 0-6h-.025A5.56 5.56 0 0 0 16 6.5 5.5 5.5 0 0 0 5.207 5.021C5.137 5.017 5.071 5 5 5a4 4 0 0 0 0 8h2.167M10 15V6m0 0L8 8m2-2 2 2"/></svg>
                            <p class="mb-2 text-sm text-gray-500"><span class="font-semibold">Click to upload</span> or drag and drop</p>
                            <p class="text-xs text-gray-500">Plain text files (.txt, .md)</p>
                        </div>
                        <input id="file-upload" type="file" class="hidden" multiple accept=".txt,.md"/>
                    </label>
                </div>
                <div id="file-list" class="mt-4 text-sm text-gray-600 space-y-2"></div>
            </div>
            
            <!-- Gemini Feature: Suggest Questions -->
            <div id="suggestions-container" class="mb-6 hidden">
                <div class="flex items-center gap-4">
                    <button id="suggest-btn" class="bg-indigo-100 text-indigo-700 font-semibold py-2 px-4 rounded-lg hover:bg-indigo-200 transition-all duration-300 flex items-center gap-2">
                        <span>✨ Suggest Investigative Questions</span>
                        <span id="suggest-loader" class="hidden loader" style="width:16px; height:16px; border-color: #4f46e5; border-bottom-color: transparent;"></span>
                    </button>
                </div>
                <div id="suggestions-output" class="mt-4 p-4 bg-gray-50 rounded-lg border hidden"></div>
            </div>

            <!-- Step 2: Ask a Question -->
            <div class="mb-6">
                <h2 class="text-xl font-semibold mb-3 text-gray-800">2. Ask a Specific Question</h2>
                <textarea id="user-prompt" rows="3" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-shadow" placeholder="e.g., 'Find all clauses in this contract that relate to intellectual property rights and liabilities.'"></textarea>
            </div>

            <!-- Analyze Button -->
            <div class="text-center">
                 <button id="generate-btn" class="bg-blue-600 text-white font-bold py-3 px-8 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-4 focus:ring-blue-300 transition-all duration-300 disabled:bg-gray-400 disabled:cursor-not-allowed flex items-center justify-center mx-auto">
                    <span id="btn-text">Analyze Documents</span>
                    <span id="btn-loader" class="hidden loader ml-2"></span>
                </button>
            </div>

            <!-- Error Message Display -->
            <div id="error-message" class="mt-4 p-4 bg-red-100 text-red-700 border border-red-200 rounded-lg hidden"></div>

            <!-- Output Section -->
            <div id="output-section" class="mt-10 border-t pt-8 hidden">
                <!-- Main analysis will be injected here -->
                <div id="main-analysis-output"></div>

                <!-- Gemini Feature: Define Key Terms -->
                <div id="terms-container" class="mt-8 hidden">
                     <button id="terms-btn" class="bg-indigo-100 text-indigo-700 font-semibold py-2 px-4 rounded-lg hover:bg-indigo-200 transition-all duration-300 flex items-center gap-2">
                        <span>✨ Extract & Define Key Terms from these Clauses</span>
                         <span id="terms-loader" class="hidden loader" style="width:16px; height:16px; border-color: #4f46e5; border-bottom-color: transparent;"></span>
                    </button>
                    <div id="terms-output" class="mt-4 hidden"></div>
                </div>
            </div>

        </main>
    </div>

    <script>
        // DOM Elements
        const fileUpload = document.getElementById('file-upload');
        const fileList = document.getElementById('file-list');
        const userPrompt = document.getElementById('user-prompt');
        const generateBtn = document.getElementById('generate-btn');
        const btnText = document.getElementById('btn-text');
        const btnLoader = document.getElementById('btn-loader');
        const outputSection = document.getElementById('output-section');
        const mainAnalysisOutput = document.getElementById('main-analysis-output');
        const errorMessage = document.getElementById('error-message');
        
        // Gemini Feature DOM Elements
        const suggestionsContainer = document.getElementById('suggestions-container');
        const suggestBtn = document.getElementById('suggest-btn');
        const suggestLoader = document.getElementById('suggest-loader');
        const suggestionsOutput = document.getElementById('suggestions-output');
        const termsContainer = document.getElementById('terms-container');
        const termsBtn = document.getElementById('terms-btn');
        const termsLoader = document.getElementById('terms-loader');
        const termsOutput = document.getElementById('terms-output');

        // State
        let documentChunks = [];
        let relevantClausesText = '';

        // --- Event Listeners ---
        fileUpload.addEventListener('change', handleFileSelect);
        generateBtn.addEventListener('click', handleGeneration);
        suggestBtn.addEventListener('click', handleSuggestQuestions);
        termsBtn.addEventListener('click', handleDefineTerms);

        // --- Core Functions ---
        async function handleFileSelect(event) {
            const files = event.target.files;
            if (files.length === 0) return;

            fileList.innerHTML = `<p class="font-semibold text-gray-700">Processing documents...</p>`;
            documentChunks = [];
            let loadedFileNames = [];

            try {
                const readPromises = Array.from(files).map(file => {
                    return readFileAsText(file).then(text => {
                        const chunks = chunkText(text, file.name);
                        documentChunks.push(...chunks);
                        loadedFileNames.push(file.name);
                    });
                });

                await Promise.all(readPromises);
                
                fileList.innerHTML = loadedFileNames.map(name => 
                    `<div class="flex items-center gap-2 bg-green-100 text-green-800 p-2 rounded-md">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-check-circle-fill" viewBox="0 0 16 16"><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0m-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/></svg>
                        <span>${name}</span>
                    </div>`
                ).join('');
                 document.getElementById('file-upload-area').style.borderColor = '#4ade80';
                 suggestionsContainer.classList.remove('hidden');

            } catch (error) {
                console.error('Error reading files:', error);
                displayError('Could not read one or more files. Please ensure they are valid text files.');
                fileList.innerHTML = '';
            }
        }

        async function handleGeneration() {
            const prompt = userPrompt.value.trim();
            if (documentChunks.length === 0 || !prompt) {
                displayError('Please upload at least one document and ask a question.');
                return;
            }

            setLoadingState(true, generateBtn, btnText, btnLoader);
            hideError();
            outputSection.classList.add('hidden');
            termsContainer.classList.add('hidden');
            termsOutput.classList.add('hidden');


            try {
                const relevantChunks = findTopChunks(prompt, documentChunks, 10);
                const formattedPrompt = createAnalysisPrompt(prompt, relevantChunks);
                const resultText = await callGeminiAPI(formattedPrompt);
                
                relevantClausesText = relevantChunks.map(c => c.content).join('\n\n');
                displayAnalysis(resultText);

            } catch (error) {
                console.error('Analysis failed:', error);
                displayError('An error occurred during analysis. Check the console for details.');
            } finally {
                setLoadingState(false, generateBtn, btnText, btnLoader);
            }
        }
        
        // --- Gemini Feature Handlers ---
        async function handleSuggestQuestions() {
            if (documentChunks.length === 0) {
                displayError("Please upload documents first.");
                return;
            }
            setLoadingState(true, suggestBtn, null, suggestLoader);
            suggestionsOutput.innerHTML = '';
            
            try {
                const sampleChunks = documentChunks.slice(0, 20); // Use a sample of chunks
                const prompt = createSuggestionPrompt(sampleChunks);
                const schema = {
                    type: "ARRAY",
                    items: { type: "STRING" }
                };

                const result = await callGeminiAPI(prompt, schema);
                const questions = JSON.parse(result);
                
                suggestionsOutput.innerHTML = `<h3 class="font-semibold mb-2 text-gray-800">Suggested Questions:</h3>
                <ul class="list-disc list-inside space-y-1">${questions.map(q => `<li class="p-1 rounded-md suggestion-item text-blue-600" onclick="useSuggestion(this)">${q}</li>`).join('')}</ul>`;
                suggestionsOutput.classList.remove('hidden');

            } catch (error) {
                console.error("Failed to suggest questions:", error);
                displayError("Could not generate question suggestions.");
            } finally {
                setLoadingState(false, suggestBtn, null, suggestLoader);
            }
        }
        
        async function handleDefineTerms() {
            if (!relevantClausesText) return;
            setLoadingState(true, termsBtn, null, termsLoader);

            try {
                const prompt = createTermsPrompt(relevantClausesText);
                const schema = {
                    type: "OBJECT",
                    properties: {
                        terms: {
                            type: "ARRAY",
                            items: {
                                type: "OBJECT",
                                properties: {
                                    term: { type: "STRING" },
                                    definition: { type: "STRING" }
                                },
                                required: ["term", "definition"]
                            }
                        }
                    }
                };

                const result = await callGeminiAPI(prompt, schema);
                const data = JSON.parse(result);

                if (data.terms && data.terms.length > 0) {
                     termsOutput.innerHTML = `<h3 class="text-xl font-bold mt-8 mb-4 text-gray-900">Key Term Definitions</h3>
                     <dl class="space-y-4">${data.terms.map(t => `
                        <div class="term-card">
                            <dt class="font-semibold text-gray-800">${t.term}</dt>
                            <dd class="mt-1 text-gray-600">${t.definition}</dd>
                        </div>
                     `).join('')}</dl>`;
                    termsOutput.classList.remove('hidden');
                } else {
                     termsOutput.innerHTML = `<p class="text-gray-600">No specific key terms were identified in the relevant clauses.</p>`;
                     termsOutput.classList.remove('hidden');
                }

            } catch(error) {
                 console.error("Failed to define terms:", error);
                 displayError("Could not extract and define key terms.");
            } finally {
                setLoadingState(false, termsBtn, null, termsLoader);
            }
        }

        // --- Helper Functions ---
        function useSuggestion(element) {
            userPrompt.value = element.textContent;
            suggestionsOutput.classList.add('hidden');
        }

        function readFileAsText(file) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = () => resolve(reader.result);
                reader.onerror = reject;
                reader.readAsText(file);
            });
        }

        function chunkText(text, sourceName) {
            return text.split(/\n\s*\n/)
                .map(p => p.trim())
                .filter(p => p.length > 25)
                .map(p => ({ content: p, source: sourceName }));
        }

        function findTopChunks(query, chunks, count) {
            const queryWords = new Set(query.toLowerCase().match(/\b\w{4,}\b/g) || []);
            const scoredChunks = chunks.map(chunk => {
                const chunkWords = new Set(chunk.content.toLowerCase().match(/\b\w{4,}\b/g) || []);
                const score = [...queryWords].filter(word => chunkWords.has(word)).length;
                return { ...chunk, score };
            });
            scoredChunks.sort((a, b) => b.score - a.score);
            return scoredChunks.slice(0, count);
        }

        // --- Prompt Creation Functions ---
        function createAnalysisPrompt(userQuery, chunks) {
            const context = chunks.map((chunk) => `Source File: "${chunk.source}"\nContent:\n${chunk.content}`).join('\n\n---\n\n');
            return `You are an expert legal analysis assistant. Your task is to find and extract information based *only* on the provided document excerpts. Do not use any external knowledge or provide legal advice.\n\nHere are the relevant document excerpts:\n---\n${context}\n---\n\nBased *only* on the information above, perform the following task: "${userQuery}"\n\nStructure your response in two parts:\n1.  **Summary:** A concise, direct answer to the user's question.\n2.  **Relevant Clauses:** A list of the exact, verbatim clauses from the source documents that support your summary. For each clause, clearly state the source file.\n\nFormat your entire response using the following template:\n\n### Summary\n[Your synthesized answer here]\n\n### Relevant Clauses\n**Source:** [Source File Name 1]\n> [Exact clause 1 content here]\n\n**Source:** [Source File Name 2]\n> [Exact clause 2 content here]`;
        }

        function createSuggestionPrompt(chunks) {
            const context = chunks.map(c => c.content).join('\n\n');
            return `You are a senior paralegal reviewing document excerpts. Based *only* on the text provided below, generate 3 to 5 insightful and specific questions a lawyer might ask to analyze these documents further. Return the questions as a JSON array of strings.\n\n---CONTEXT---\n${context}`;
        }

        function createTermsPrompt(clausesText) {
            return `You are a legal dictionary assistant. From the following legal text, identify the key defined terms or terms of art. For each term, provide a concise definition based *only* on the context of the text provided. Do not use external knowledge. Return the result as a JSON object with a single key "terms", which is an array of objects, where each object has a "term" and a "definition".\n\n---TEXT---\n${clausesText}`;
        }

        // --- API Call ---
        async function callGeminiAPI(prompt, schema = null) {
            const apiKey = ""; // Canvas provides this
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;
            
            const payload = {
                contents: [{ parts: [{ text: prompt }] }],
                generationConfig: {
                    temperature: 0.1,
                    topK: 32,
                    maxOutputTokens: 2048,
                },
            };

            if (schema) {
                payload.generationConfig.responseMimeType = "application/json";
                payload.generationConfig.responseSchema = schema;
            }

            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload),
            });

            if (!response.ok) {
                 const errorBody = await response.text();
                 throw new Error(`API Error: ${response.status} ${response.statusText} - ${errorBody}`);
            }
            const result = await response.json();
            const candidate = result.candidates?.[0];
            if (!candidate?.content?.parts?.[0]?.text) throw new Error('Invalid API response structure.');
            return candidate.content.parts[0].text;
        }

        // --- Display Functions ---
        function displayAnalysis(text) {
            let html = text
                .replace(/</g, "&lt;").replace(/>/g, "&gt;")
                .replace(/### Summary/g, '<h2 class="text-2xl font-bold mb-4 text-gray-900">Summary</h2><div class="prose prose-lg text-gray-700 mb-8">')
                .replace(/### Relevant Clauses/g, '</div><h2 class="text-2xl font-bold mb-4 text-gray-900">Relevant Clauses</h2>')
                .replace(/\*\*Source:\*\* (.+?)\n&gt; ((.|\n)+?)(?=\n\*\*Source:\*\*|\n*$)/g, (match, source, content) => {
                    return `<div class="clause-card"><span class="clause-source">${source.trim()}</span><blockquote class="clause-content">${content.trim()}</blockquote></div>`;
                });
             html = html.replace(/\*\*Source:\*\* (.+?)\n&gt; ([\s\S]*)/g, (match, source, content) => {
                 if(html.includes('<div class="clause-card">')) return match;
                    return `<div class="clause-card"><span class="clause-source">${source.trim()}</span><blockquote class="clause-content">${content.trim()}</blockquote></div>`;
            });

            mainAnalysisOutput.innerHTML = html;
            outputSection.classList.remove('hidden');
            termsContainer.classList.remove('hidden');
            outputSection.scrollIntoView({ behavior: 'smooth' });
        }

        // --- UI Utility Functions ---
        function setLoadingState(isLoading, btn, textEl, loaderEl) {
            btn.disabled = isLoading;
            if (textEl) textEl.classList.toggle('hidden', isLoading);
            if (loaderEl) loaderEl.classList.toggle('hidden', !isLoading);
        }
        
        function displayError(message) {
            errorMessage.textContent = message;
            errorMessage.classList.remove('hidden');
        }

        function hideError() {
            errorMessage.classList.add('hidden');
        }

    </script>
</body>
</html>

